classdef MenuEntry < robotics.ros.Message
    %MenuEntry MATLAB implementation of visualization_msgs/MenuEntry
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'visualization_msgs/MenuEntry' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'b90ec63024573de83b57aa93eb39be2d' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        FEEDBACK = uint8(0)
        ROSRUN = uint8(1)
        ROSLAUNCH = uint8(2)
    end
    
    properties (Dependent)
        Id
        ParentId
        Title
        Command
        CommandType
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Command', 'CommandType', 'Id', 'ParentId', 'Title'} % List of non-constant message properties
        ROSPropertyList = {'command', 'command_type', 'id', 'parent_id', 'title'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = MenuEntry(msg)
            %MenuEntry Construct the message object MenuEntry
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function id = get.Id(obj)
            %get.Id Get the value for property Id
            id = typecast(int32(obj.JavaMessage.getId), 'uint32');
        end
        
        function set.Id(obj, id)
            %set.Id Set the value for property Id
            validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'MenuEntry', 'Id');
            
            obj.JavaMessage.setId(id);
        end
        
        function parentid = get.ParentId(obj)
            %get.ParentId Get the value for property ParentId
            parentid = typecast(int32(obj.JavaMessage.getParentId), 'uint32');
        end
        
        function set.ParentId(obj, parentid)
            %set.ParentId Set the value for property ParentId
            validateattributes(parentid, {'numeric'}, {'nonempty', 'scalar'}, 'MenuEntry', 'ParentId');
            
            obj.JavaMessage.setParentId(parentid);
        end
        
        function title = get.Title(obj)
            %get.Title Get the value for property Title
            title = char(obj.JavaMessage.getTitle);
        end
        
        function set.Title(obj, title)
            %set.Title Set the value for property Title
            title = convertStringsToChars(title);
            
            validateattributes(title, {'char', 'string'}, {}, 'MenuEntry', 'Title');
            
            obj.JavaMessage.setTitle(title);
        end
        
        function command = get.Command(obj)
            %get.Command Get the value for property Command
            command = char(obj.JavaMessage.getCommand);
        end
        
        function set.Command(obj, command)
            %set.Command Set the value for property Command
            command = convertStringsToChars(command);
            
            validateattributes(command, {'char', 'string'}, {}, 'MenuEntry', 'Command');
            
            obj.JavaMessage.setCommand(command);
        end
        
        function commandtype = get.CommandType(obj)
            %get.CommandType Get the value for property CommandType
            commandtype = typecast(int8(obj.JavaMessage.getCommandType), 'uint8');
        end
        
        function set.CommandType(obj, commandtype)
            %set.CommandType Set the value for property CommandType
            validateattributes(commandtype, {'numeric'}, {'nonempty', 'scalar'}, 'MenuEntry', 'CommandType');
            
            obj.JavaMessage.setCommandType(commandtype);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Id = obj.Id;
            cpObj.ParentId = obj.ParentId;
            cpObj.Title = obj.Title;
            cpObj.Command = obj.Command;
            cpObj.CommandType = obj.CommandType;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Id = strObj.Id;
            obj.ParentId = strObj.ParentId;
            obj.Title = strObj.Title;
            obj.Command = strObj.Command;
            obj.CommandType = strObj.CommandType;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Id = obj.Id;
            strObj.ParentId = obj.ParentId;
            strObj.Title = obj.Title;
            strObj.Command = obj.Command;
            strObj.CommandType = obj.CommandType;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.visualization_msgs.MenuEntry.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.visualization_msgs.MenuEntry;
            obj.reload(strObj);
        end
    end
end
