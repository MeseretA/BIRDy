classdef Marker < robotics.ros.Message
    %Marker MATLAB implementation of visualization_msgs/Marker
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'visualization_msgs/Marker' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '4048c9de2a16f4ae8e0538085ebf1b97' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        ARROW = uint8(0)
        CUBE = uint8(1)
        SPHERE = uint8(2)
        CYLINDER = uint8(3)
        LINESTRIP = uint8(4)
        LINELIST = uint8(5)
        CUBELIST = uint8(6)
        SPHERELIST = uint8(7)
        POINTS = uint8(8)
        TEXTVIEWFACING = uint8(9)
        MESHRESOURCE = uint8(10)
        TRIANGLELIST = uint8(11)
        ADD = uint8(0)
        MODIFY = uint8(0)
        DELETE = uint8(2)
        DELETEALL = uint8(3)
    end
    
    properties (Constant, Access = protected)
        DurationClass = robotics.ros.msg.internal.MessageFactory.getClassForType('duration') % Dispatch to MATLAB class for message type duration
        GeometryMsgsPointClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
        GeometryMsgsPoseClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Pose') % Dispatch to MATLAB class for message type geometry_msgs/Pose
        GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        StdMsgsColorRGBAClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/ColorRGBA') % Dispatch to MATLAB class for message type std_msgs/ColorRGBA
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Ns
        Id
        Type
        Action
        Pose
        Scale
        Color
        Lifetime
        FrameLocked
        Text
        MeshResource
        MeshUseEmbeddedMaterials
        Points
        Colors
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Pose', [], 'Scale', [], 'Color', [], 'Lifetime', [], 'Points', [], 'Colors', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Action', 'Color', 'Colors', 'FrameLocked', 'Header', 'Id', 'Lifetime', 'MeshResource', 'MeshUseEmbeddedMaterials', 'Ns', 'Points', 'Pose', 'Scale', 'Text', 'Type'} % List of non-constant message properties
        ROSPropertyList = {'action', 'color', 'colors', 'frame_locked', 'header', 'id', 'lifetime', 'mesh_resource', 'mesh_use_embedded_materials', 'ns', 'points', 'pose', 'scale', 'text', 'type'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Marker(msg)
            %Marker Construct the message object Marker
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Marker', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function ns = get.Ns(obj)
            %get.Ns Get the value for property Ns
            ns = char(obj.JavaMessage.getNs);
        end
        
        function set.Ns(obj, ns)
            %set.Ns Set the value for property Ns
            ns = convertStringsToChars(ns);
            
            validateattributes(ns, {'char', 'string'}, {}, 'Marker', 'Ns');
            
            obj.JavaMessage.setNs(ns);
        end
        
        function id = get.Id(obj)
            %get.Id Get the value for property Id
            id = int32(obj.JavaMessage.getId);
        end
        
        function set.Id(obj, id)
            %set.Id Set the value for property Id
            validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'Marker', 'Id');
            
            obj.JavaMessage.setId(id);
        end
        
        function type = get.Type(obj)
            %get.Type Get the value for property Type
            type = int32(obj.JavaMessage.getType);
        end
        
        function set.Type(obj, type)
            %set.Type Set the value for property Type
            validateattributes(type, {'numeric'}, {'nonempty', 'scalar'}, 'Marker', 'Type');
            
            obj.JavaMessage.setType(type);
        end
        
        function action = get.Action(obj)
            %get.Action Get the value for property Action
            action = int32(obj.JavaMessage.getAction);
        end
        
        function set.Action(obj, action)
            %set.Action Set the value for property Action
            validateattributes(action, {'numeric'}, {'nonempty', 'scalar'}, 'Marker', 'Action');
            
            obj.JavaMessage.setAction(action);
        end
        
        function pose = get.Pose(obj)
            %get.Pose Get the value for property Pose
            if isempty(obj.Cache.Pose)
                obj.Cache.Pose = feval(obj.GeometryMsgsPoseClass, obj.JavaMessage.getPose);
            end
            pose = obj.Cache.Pose;
        end
        
        function set.Pose(obj, pose)
            %set.Pose Set the value for property Pose
            validateattributes(pose, {obj.GeometryMsgsPoseClass}, {'nonempty', 'scalar'}, 'Marker', 'Pose');
            
            obj.JavaMessage.setPose(pose.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Pose)
                obj.Cache.Pose.setJavaObject(pose.getJavaObject);
            end
        end
        
        function scale = get.Scale(obj)
            %get.Scale Get the value for property Scale
            if isempty(obj.Cache.Scale)
                obj.Cache.Scale = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getScale);
            end
            scale = obj.Cache.Scale;
        end
        
        function set.Scale(obj, scale)
            %set.Scale Set the value for property Scale
            validateattributes(scale, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'Marker', 'Scale');
            
            obj.JavaMessage.setScale(scale.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Scale)
                obj.Cache.Scale.setJavaObject(scale.getJavaObject);
            end
        end
        
        function color = get.Color(obj)
            %get.Color Get the value for property Color
            if isempty(obj.Cache.Color)
                obj.Cache.Color = feval(obj.StdMsgsColorRGBAClass, obj.JavaMessage.getColor);
            end
            color = obj.Cache.Color;
        end
        
        function set.Color(obj, color)
            %set.Color Set the value for property Color
            validateattributes(color, {obj.StdMsgsColorRGBAClass}, {'nonempty', 'scalar'}, 'Marker', 'Color');
            
            obj.JavaMessage.setColor(color.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Color)
                obj.Cache.Color.setJavaObject(color.getJavaObject);
            end
        end
        
        function lifetime = get.Lifetime(obj)
            %get.Lifetime Get the value for property Lifetime
            if isempty(obj.Cache.Lifetime)
                obj.Cache.Lifetime = feval(obj.DurationClass, obj.JavaMessage.getLifetime);
            end
            lifetime = obj.Cache.Lifetime;
        end
        
        function set.Lifetime(obj, lifetime)
            %set.Lifetime Set the value for property Lifetime
            validateattributes(lifetime, {obj.DurationClass}, {'nonempty', 'scalar'}, 'Marker', 'Lifetime');
            
            obj.JavaMessage.setLifetime(lifetime.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Lifetime)
                obj.Cache.Lifetime.setJavaObject(lifetime.getJavaObject);
            end
        end
        
        function framelocked = get.FrameLocked(obj)
            %get.FrameLocked Get the value for property FrameLocked
            framelocked = logical(obj.JavaMessage.getFrameLocked);
        end
        
        function set.FrameLocked(obj, framelocked)
            %set.FrameLocked Set the value for property FrameLocked
            validateattributes(framelocked, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Marker', 'FrameLocked');
            
            obj.JavaMessage.setFrameLocked(framelocked);
        end
        
        function text = get.Text(obj)
            %get.Text Get the value for property Text
            text = char(obj.JavaMessage.getText);
        end
        
        function set.Text(obj, text)
            %set.Text Set the value for property Text
            text = convertStringsToChars(text);
            
            validateattributes(text, {'char', 'string'}, {}, 'Marker', 'Text');
            
            obj.JavaMessage.setText(text);
        end
        
        function meshresource = get.MeshResource(obj)
            %get.MeshResource Get the value for property MeshResource
            meshresource = char(obj.JavaMessage.getMeshResource);
        end
        
        function set.MeshResource(obj, meshresource)
            %set.MeshResource Set the value for property MeshResource
            meshresource = convertStringsToChars(meshresource);
            
            validateattributes(meshresource, {'char', 'string'}, {}, 'Marker', 'MeshResource');
            
            obj.JavaMessage.setMeshResource(meshresource);
        end
        
        function meshuseembeddedmaterials = get.MeshUseEmbeddedMaterials(obj)
            %get.MeshUseEmbeddedMaterials Get the value for property MeshUseEmbeddedMaterials
            meshuseembeddedmaterials = logical(obj.JavaMessage.getMeshUseEmbeddedMaterials);
        end
        
        function set.MeshUseEmbeddedMaterials(obj, meshuseembeddedmaterials)
            %set.MeshUseEmbeddedMaterials Set the value for property MeshUseEmbeddedMaterials
            validateattributes(meshuseembeddedmaterials, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Marker', 'MeshUseEmbeddedMaterials');
            
            obj.JavaMessage.setMeshUseEmbeddedMaterials(meshuseembeddedmaterials);
        end
        
        function points = get.Points(obj)
            %get.Points Get the value for property Points
            if isempty(obj.Cache.Points)
                javaArray = obj.JavaMessage.getPoints;
                array = obj.readJavaArray(javaArray, obj.GeometryMsgsPointClass);
                obj.Cache.Points = feval(obj.GeometryMsgsPointClass, array);
            end
            points = obj.Cache.Points;
        end
        
        function set.Points(obj, points)
            %set.Points Set the value for property Points
            if ~isvector(points) && isempty(points)
                % Allow empty [] input
                points = feval([obj.GeometryMsgsPointClass '.empty'], 0, 1);
            end
            
            validateattributes(points, {obj.GeometryMsgsPointClass}, {'vector'}, 'Marker', 'Points');
            
            javaArray = obj.JavaMessage.getPoints;
            array = obj.writeJavaArray(points, javaArray, obj.GeometryMsgsPointClass);
            obj.JavaMessage.setPoints(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Points)
                obj.Cache.Points = [];
                obj.Cache.Points = obj.Points;
            end
        end
        
        function colors = get.Colors(obj)
            %get.Colors Get the value for property Colors
            if isempty(obj.Cache.Colors)
                javaArray = obj.JavaMessage.getColors;
                array = obj.readJavaArray(javaArray, obj.StdMsgsColorRGBAClass);
                obj.Cache.Colors = feval(obj.StdMsgsColorRGBAClass, array);
            end
            colors = obj.Cache.Colors;
        end
        
        function set.Colors(obj, colors)
            %set.Colors Set the value for property Colors
            if ~isvector(colors) && isempty(colors)
                % Allow empty [] input
                colors = feval([obj.StdMsgsColorRGBAClass '.empty'], 0, 1);
            end
            
            validateattributes(colors, {obj.StdMsgsColorRGBAClass}, {'vector'}, 'Marker', 'Colors');
            
            javaArray = obj.JavaMessage.getColors;
            array = obj.writeJavaArray(colors, javaArray, obj.StdMsgsColorRGBAClass);
            obj.JavaMessage.setColors(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Colors)
                obj.Cache.Colors = [];
                obj.Cache.Colors = obj.Colors;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Pose = [];
            obj.Cache.Scale = [];
            obj.Cache.Color = [];
            obj.Cache.Lifetime = [];
            obj.Cache.Points = [];
            obj.Cache.Colors = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Ns = obj.Ns;
            cpObj.Id = obj.Id;
            cpObj.Type = obj.Type;
            cpObj.Action = obj.Action;
            cpObj.FrameLocked = obj.FrameLocked;
            cpObj.Text = obj.Text;
            cpObj.MeshResource = obj.MeshResource;
            cpObj.MeshUseEmbeddedMaterials = obj.MeshUseEmbeddedMaterials;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Pose = copy(obj.Pose);
            cpObj.Scale = copy(obj.Scale);
            cpObj.Color = copy(obj.Color);
            cpObj.Lifetime = copy(obj.Lifetime);
            cpObj.Points = copy(obj.Points);
            cpObj.Colors = copy(obj.Colors);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Ns = strObj.Ns;
            obj.Id = strObj.Id;
            obj.Type = strObj.Type;
            obj.Action = strObj.Action;
            obj.FrameLocked = strObj.FrameLocked;
            obj.Text = strObj.Text;
            obj.MeshResource = strObj.MeshResource;
            obj.MeshUseEmbeddedMaterials = strObj.MeshUseEmbeddedMaterials;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Pose = feval([obj.GeometryMsgsPoseClass '.loadobj'], strObj.Pose);
            obj.Scale = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.Scale);
            obj.Color = feval([obj.StdMsgsColorRGBAClass '.loadobj'], strObj.Color);
            obj.Lifetime = feval([obj.DurationClass '.loadobj'], strObj.Lifetime);
            PointsCell = arrayfun(@(x) feval([obj.GeometryMsgsPointClass '.loadobj'], x), strObj.Points, 'UniformOutput', false);
            obj.Points = vertcat(PointsCell{:});
            ColorsCell = arrayfun(@(x) feval([obj.StdMsgsColorRGBAClass '.loadobj'], x), strObj.Colors, 'UniformOutput', false);
            obj.Colors = vertcat(ColorsCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Ns = obj.Ns;
            strObj.Id = obj.Id;
            strObj.Type = obj.Type;
            strObj.Action = obj.Action;
            strObj.FrameLocked = obj.FrameLocked;
            strObj.Text = obj.Text;
            strObj.MeshResource = obj.MeshResource;
            strObj.MeshUseEmbeddedMaterials = obj.MeshUseEmbeddedMaterials;
            strObj.Header = saveobj(obj.Header);
            strObj.Pose = saveobj(obj.Pose);
            strObj.Scale = saveobj(obj.Scale);
            strObj.Color = saveobj(obj.Color);
            strObj.Lifetime = saveobj(obj.Lifetime);
            strObj.Points = arrayfun(@(x) saveobj(x), obj.Points);
            strObj.Colors = arrayfun(@(x) saveobj(x), obj.Colors);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.visualization_msgs.Marker.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.visualization_msgs.Marker;
            obj.reload(strObj);
        end
    end
end
