classdef InteractiveMarker < robotics.ros.Message
    %InteractiveMarker MATLAB implementation of visualization_msgs/InteractiveMarker
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'visualization_msgs/InteractiveMarker' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'dd86d22909d5a3364b384492e35c10af' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPoseClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Pose') % Dispatch to MATLAB class for message type geometry_msgs/Pose
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
        VisualizationMsgsInteractiveMarkerControlClass = robotics.ros.msg.internal.MessageFactory.getClassForType('visualization_msgs/InteractiveMarkerControl') % Dispatch to MATLAB class for message type visualization_msgs/InteractiveMarkerControl
        VisualizationMsgsMenuEntryClass = robotics.ros.msg.internal.MessageFactory.getClassForType('visualization_msgs/MenuEntry') % Dispatch to MATLAB class for message type visualization_msgs/MenuEntry
    end
    
    properties (Dependent)
        Header
        Pose
        Name
        Description
        Scale
        MenuEntries
        Controls
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Pose', [], 'MenuEntries', [], 'Controls', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Controls', 'Description', 'Header', 'MenuEntries', 'Name', 'Pose', 'Scale'} % List of non-constant message properties
        ROSPropertyList = {'controls', 'description', 'header', 'menu_entries', 'name', 'pose', 'scale'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = InteractiveMarker(msg)
            %InteractiveMarker Construct the message object InteractiveMarker
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'InteractiveMarker', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function pose = get.Pose(obj)
            %get.Pose Get the value for property Pose
            if isempty(obj.Cache.Pose)
                obj.Cache.Pose = feval(obj.GeometryMsgsPoseClass, obj.JavaMessage.getPose);
            end
            pose = obj.Cache.Pose;
        end
        
        function set.Pose(obj, pose)
            %set.Pose Set the value for property Pose
            validateattributes(pose, {obj.GeometryMsgsPoseClass}, {'nonempty', 'scalar'}, 'InteractiveMarker', 'Pose');
            
            obj.JavaMessage.setPose(pose.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Pose)
                obj.Cache.Pose.setJavaObject(pose.getJavaObject);
            end
        end
        
        function name = get.Name(obj)
            %get.Name Get the value for property Name
            name = char(obj.JavaMessage.getName);
        end
        
        function set.Name(obj, name)
            %set.Name Set the value for property Name
            name = convertStringsToChars(name);
            
            validateattributes(name, {'char', 'string'}, {}, 'InteractiveMarker', 'Name');
            
            obj.JavaMessage.setName(name);
        end
        
        function description = get.Description(obj)
            %get.Description Get the value for property Description
            description = char(obj.JavaMessage.getDescription);
        end
        
        function set.Description(obj, description)
            %set.Description Set the value for property Description
            description = convertStringsToChars(description);
            
            validateattributes(description, {'char', 'string'}, {}, 'InteractiveMarker', 'Description');
            
            obj.JavaMessage.setDescription(description);
        end
        
        function scale = get.Scale(obj)
            %get.Scale Get the value for property Scale
            scale = single(obj.JavaMessage.getScale);
        end
        
        function set.Scale(obj, scale)
            %set.Scale Set the value for property Scale
            validateattributes(scale, {'numeric'}, {'nonempty', 'scalar'}, 'InteractiveMarker', 'Scale');
            
            obj.JavaMessage.setScale(scale);
        end
        
        function menuentries = get.MenuEntries(obj)
            %get.MenuEntries Get the value for property MenuEntries
            if isempty(obj.Cache.MenuEntries)
                javaArray = obj.JavaMessage.getMenuEntries;
                array = obj.readJavaArray(javaArray, obj.VisualizationMsgsMenuEntryClass);
                obj.Cache.MenuEntries = feval(obj.VisualizationMsgsMenuEntryClass, array);
            end
            menuentries = obj.Cache.MenuEntries;
        end
        
        function set.MenuEntries(obj, menuentries)
            %set.MenuEntries Set the value for property MenuEntries
            if ~isvector(menuentries) && isempty(menuentries)
                % Allow empty [] input
                menuentries = feval([obj.VisualizationMsgsMenuEntryClass '.empty'], 0, 1);
            end
            
            validateattributes(menuentries, {obj.VisualizationMsgsMenuEntryClass}, {'vector'}, 'InteractiveMarker', 'MenuEntries');
            
            javaArray = obj.JavaMessage.getMenuEntries;
            array = obj.writeJavaArray(menuentries, javaArray, obj.VisualizationMsgsMenuEntryClass);
            obj.JavaMessage.setMenuEntries(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.MenuEntries)
                obj.Cache.MenuEntries = [];
                obj.Cache.MenuEntries = obj.MenuEntries;
            end
        end
        
        function controls = get.Controls(obj)
            %get.Controls Get the value for property Controls
            if isempty(obj.Cache.Controls)
                javaArray = obj.JavaMessage.getControls;
                array = obj.readJavaArray(javaArray, obj.VisualizationMsgsInteractiveMarkerControlClass);
                obj.Cache.Controls = feval(obj.VisualizationMsgsInteractiveMarkerControlClass, array);
            end
            controls = obj.Cache.Controls;
        end
        
        function set.Controls(obj, controls)
            %set.Controls Set the value for property Controls
            if ~isvector(controls) && isempty(controls)
                % Allow empty [] input
                controls = feval([obj.VisualizationMsgsInteractiveMarkerControlClass '.empty'], 0, 1);
            end
            
            validateattributes(controls, {obj.VisualizationMsgsInteractiveMarkerControlClass}, {'vector'}, 'InteractiveMarker', 'Controls');
            
            javaArray = obj.JavaMessage.getControls;
            array = obj.writeJavaArray(controls, javaArray, obj.VisualizationMsgsInteractiveMarkerControlClass);
            obj.JavaMessage.setControls(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Controls)
                obj.Cache.Controls = [];
                obj.Cache.Controls = obj.Controls;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Pose = [];
            obj.Cache.MenuEntries = [];
            obj.Cache.Controls = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Name = obj.Name;
            cpObj.Description = obj.Description;
            cpObj.Scale = obj.Scale;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Pose = copy(obj.Pose);
            cpObj.MenuEntries = copy(obj.MenuEntries);
            cpObj.Controls = copy(obj.Controls);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Name = strObj.Name;
            obj.Description = strObj.Description;
            obj.Scale = strObj.Scale;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Pose = feval([obj.GeometryMsgsPoseClass '.loadobj'], strObj.Pose);
            MenuEntriesCell = arrayfun(@(x) feval([obj.VisualizationMsgsMenuEntryClass '.loadobj'], x), strObj.MenuEntries, 'UniformOutput', false);
            obj.MenuEntries = vertcat(MenuEntriesCell{:});
            ControlsCell = arrayfun(@(x) feval([obj.VisualizationMsgsInteractiveMarkerControlClass '.loadobj'], x), strObj.Controls, 'UniformOutput', false);
            obj.Controls = vertcat(ControlsCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Name = obj.Name;
            strObj.Description = obj.Description;
            strObj.Scale = obj.Scale;
            strObj.Header = saveobj(obj.Header);
            strObj.Pose = saveobj(obj.Pose);
            strObj.MenuEntries = arrayfun(@(x) saveobj(x), obj.MenuEntries);
            strObj.Controls = arrayfun(@(x) saveobj(x), obj.Controls);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.visualization_msgs.InteractiveMarker.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.visualization_msgs.InteractiveMarker;
            obj.reload(strObj);
        end
    end
end
