classdef InteractiveMarkerFeedback < robotics.ros.Message
    %InteractiveMarkerFeedback MATLAB implementation of visualization_msgs/InteractiveMarkerFeedback
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'visualization_msgs/InteractiveMarkerFeedback' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'ab0f1eee058667e28c19ff3ffc3f4b78' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        KEEPALIVE = uint8(0)
        POSEUPDATE = uint8(1)
        MENUSELECT = uint8(2)
        BUTTONCLICK = uint8(3)
        MOUSEDOWN = uint8(4)
        MOUSEUP = uint8(5)
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPointClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
        GeometryMsgsPoseClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Pose') % Dispatch to MATLAB class for message type geometry_msgs/Pose
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        ClientId
        MarkerName
        ControlName
        EventType
        Pose
        MenuEntryId
        MousePoint
        MousePointValid
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Pose', [], 'MousePoint', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ClientId', 'ControlName', 'EventType', 'Header', 'MarkerName', 'MenuEntryId', 'MousePoint', 'MousePointValid', 'Pose'} % List of non-constant message properties
        ROSPropertyList = {'client_id', 'control_name', 'event_type', 'header', 'marker_name', 'menu_entry_id', 'mouse_point', 'mouse_point_valid', 'pose'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = InteractiveMarkerFeedback(msg)
            %InteractiveMarkerFeedback Construct the message object InteractiveMarkerFeedback
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'InteractiveMarkerFeedback', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function clientid = get.ClientId(obj)
            %get.ClientId Get the value for property ClientId
            clientid = char(obj.JavaMessage.getClientId);
        end
        
        function set.ClientId(obj, clientid)
            %set.ClientId Set the value for property ClientId
            clientid = convertStringsToChars(clientid);
            
            validateattributes(clientid, {'char', 'string'}, {}, 'InteractiveMarkerFeedback', 'ClientId');
            
            obj.JavaMessage.setClientId(clientid);
        end
        
        function markername = get.MarkerName(obj)
            %get.MarkerName Get the value for property MarkerName
            markername = char(obj.JavaMessage.getMarkerName);
        end
        
        function set.MarkerName(obj, markername)
            %set.MarkerName Set the value for property MarkerName
            markername = convertStringsToChars(markername);
            
            validateattributes(markername, {'char', 'string'}, {}, 'InteractiveMarkerFeedback', 'MarkerName');
            
            obj.JavaMessage.setMarkerName(markername);
        end
        
        function controlname = get.ControlName(obj)
            %get.ControlName Get the value for property ControlName
            controlname = char(obj.JavaMessage.getControlName);
        end
        
        function set.ControlName(obj, controlname)
            %set.ControlName Set the value for property ControlName
            controlname = convertStringsToChars(controlname);
            
            validateattributes(controlname, {'char', 'string'}, {}, 'InteractiveMarkerFeedback', 'ControlName');
            
            obj.JavaMessage.setControlName(controlname);
        end
        
        function eventtype = get.EventType(obj)
            %get.EventType Get the value for property EventType
            eventtype = typecast(int8(obj.JavaMessage.getEventType), 'uint8');
        end
        
        function set.EventType(obj, eventtype)
            %set.EventType Set the value for property EventType
            validateattributes(eventtype, {'numeric'}, {'nonempty', 'scalar'}, 'InteractiveMarkerFeedback', 'EventType');
            
            obj.JavaMessage.setEventType(eventtype);
        end
        
        function pose = get.Pose(obj)
            %get.Pose Get the value for property Pose
            if isempty(obj.Cache.Pose)
                obj.Cache.Pose = feval(obj.GeometryMsgsPoseClass, obj.JavaMessage.getPose);
            end
            pose = obj.Cache.Pose;
        end
        
        function set.Pose(obj, pose)
            %set.Pose Set the value for property Pose
            validateattributes(pose, {obj.GeometryMsgsPoseClass}, {'nonempty', 'scalar'}, 'InteractiveMarkerFeedback', 'Pose');
            
            obj.JavaMessage.setPose(pose.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Pose)
                obj.Cache.Pose.setJavaObject(pose.getJavaObject);
            end
        end
        
        function menuentryid = get.MenuEntryId(obj)
            %get.MenuEntryId Get the value for property MenuEntryId
            menuentryid = typecast(int32(obj.JavaMessage.getMenuEntryId), 'uint32');
        end
        
        function set.MenuEntryId(obj, menuentryid)
            %set.MenuEntryId Set the value for property MenuEntryId
            validateattributes(menuentryid, {'numeric'}, {'nonempty', 'scalar'}, 'InteractiveMarkerFeedback', 'MenuEntryId');
            
            obj.JavaMessage.setMenuEntryId(menuentryid);
        end
        
        function mousepoint = get.MousePoint(obj)
            %get.MousePoint Get the value for property MousePoint
            if isempty(obj.Cache.MousePoint)
                obj.Cache.MousePoint = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getMousePoint);
            end
            mousepoint = obj.Cache.MousePoint;
        end
        
        function set.MousePoint(obj, mousepoint)
            %set.MousePoint Set the value for property MousePoint
            validateattributes(mousepoint, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'InteractiveMarkerFeedback', 'MousePoint');
            
            obj.JavaMessage.setMousePoint(mousepoint.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.MousePoint)
                obj.Cache.MousePoint.setJavaObject(mousepoint.getJavaObject);
            end
        end
        
        function mousepointvalid = get.MousePointValid(obj)
            %get.MousePointValid Get the value for property MousePointValid
            mousepointvalid = logical(obj.JavaMessage.getMousePointValid);
        end
        
        function set.MousePointValid(obj, mousepointvalid)
            %set.MousePointValid Set the value for property MousePointValid
            validateattributes(mousepointvalid, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'InteractiveMarkerFeedback', 'MousePointValid');
            
            obj.JavaMessage.setMousePointValid(mousepointvalid);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Pose = [];
            obj.Cache.MousePoint = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ClientId = obj.ClientId;
            cpObj.MarkerName = obj.MarkerName;
            cpObj.ControlName = obj.ControlName;
            cpObj.EventType = obj.EventType;
            cpObj.MenuEntryId = obj.MenuEntryId;
            cpObj.MousePointValid = obj.MousePointValid;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Pose = copy(obj.Pose);
            cpObj.MousePoint = copy(obj.MousePoint);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ClientId = strObj.ClientId;
            obj.MarkerName = strObj.MarkerName;
            obj.ControlName = strObj.ControlName;
            obj.EventType = strObj.EventType;
            obj.MenuEntryId = strObj.MenuEntryId;
            obj.MousePointValid = strObj.MousePointValid;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Pose = feval([obj.GeometryMsgsPoseClass '.loadobj'], strObj.Pose);
            obj.MousePoint = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.MousePoint);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ClientId = obj.ClientId;
            strObj.MarkerName = obj.MarkerName;
            strObj.ControlName = obj.ControlName;
            strObj.EventType = obj.EventType;
            strObj.MenuEntryId = obj.MenuEntryId;
            strObj.MousePointValid = obj.MousePointValid;
            strObj.Header = saveobj(obj.Header);
            strObj.Pose = saveobj(obj.Pose);
            strObj.MousePoint = saveobj(obj.MousePoint);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.visualization_msgs.InteractiveMarkerFeedback.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.visualization_msgs.InteractiveMarkerFeedback;
            obj.reload(strObj);
        end
    end
end
